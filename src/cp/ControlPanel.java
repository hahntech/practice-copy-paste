/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cp;

import java.io.File;
import java.io.IOException;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.RowSetProvider;
import com.microsoft.sqlserver.jdbc.SQLServerDriver;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.AccessDeniedException;
import java.nio.file.FileSystemException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import org.supercsv.cellprocessor.Optional;

// https://commons.apache.org/proper/commons-io/download_io.cgi?Preferred=http%3A%2F%2Fapache.cs.utah.edu%2F
import org.apache.commons.io.FileUtils;
import org.supercsv.cellprocessor.ParseDate;
import org.supercsv.cellprocessor.constraint.NotNull;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvListReader;
import org.supercsv.io.CsvListWriter;
import org.supercsv.io.ICsvListReader;
import org.supercsv.io.ICsvListWriter;
import org.supercsv.prefs.CsvPreference;


/**
 *
 * @author petehahn
 */
public class ControlPanel extends javax.swing.JFrame {
    private final String TARGET_FOLDER = "AllstyleProgramSuite 2";
    private final String TARGET_JAR = "AllStyleProgramSuite_2.jar";
    /**
     * Creates new form ControlPanel
     */
    public ControlPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonMoveFiles = new javax.swing.JButton();
        jButtonMoveDirectories = new javax.swing.JButton();
        jButtonDetails = new javax.swing.JButton();
        jButtonCheckFiles = new javax.swing.JButton();
        jButtonRenameFile = new javax.swing.JButton();
        jButtonRenameFolder = new javax.swing.JButton();
        jButtonPrintVersion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButtonMoveFiles.setText("Move Files");
        jButtonMoveFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveFilesActionPerformed(evt);
            }
        });

        jButtonMoveDirectories.setText("Move Directories");
        jButtonMoveDirectories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveDirectoriesActionPerformed(evt);
            }
        });

        jButtonDetails.setText("Print Details");
        jButtonDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetailsActionPerformed(evt);
            }
        });

        jButtonCheckFiles.setText("Check Files");
        jButtonCheckFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckFilesActionPerformed(evt);
            }
        });

        jButtonRenameFile.setText("Rename File");
        jButtonRenameFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameFileActionPerformed(evt);
            }
        });

        jButtonRenameFolder.setText("Rename Folder");
        jButtonRenameFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenameFolderActionPerformed(evt);
            }
        });

        jButtonPrintVersion.setText("Print V#");
        jButtonPrintVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintVersionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonCheckFiles)
                            .addComponent(jButtonDetails)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonPrintVersion)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonRenameFile)
                                    .addGap(88, 88, 88)
                                    .addComponent(jButtonRenameFolder))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButtonMoveFiles)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonMoveDirectories))))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonMoveFiles)
                    .addComponent(jButtonMoveDirectories))
                .addGap(18, 18, 18)
                .addComponent(jButtonDetails)
                .addGap(26, 26, 26)
                .addComponent(jButtonCheckFiles)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRenameFile)
                    .addComponent(jButtonRenameFolder))
                .addGap(18, 18, 18)
                .addComponent(jButtonPrintVersion)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateAndLaunch() {
        MessagePrompt prompt;
        prompt = new MessagePrompt();
        String messageDialog = "";
        String messageTitle = "";
        boolean didRenameFile = false;
        Object[] localVersionDetails = null;
        String[] newVersionDetails = null;
        long localVersionNumber = -1;
        long newVersionNumber = -1;
        boolean didUpdateVersion = false;
        int userResponse = 1;
        boolean didStart = false;
        LogIt logger = new LogIt();
        
        // 1. try to rename target jar
        didRenameFile = renameLocalTarget("Jar", "_BAK");
            
        if (didRenameFile == true) {
            // a. if rename succedes, the program is not running. set target jar name back to original
            didRenameFile = false;
            didRenameFile = renameLocalTarget("Jar", "");
        } else {
            // b. if rename fails, the program is running. Notify user to shut down and exit
            messageDialog = "The AllstyleProgramSuite is already running!";
            messageTitle = "Program Already Open";
            JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (didRenameFile == true) {
            // 2. Provided case a. above, go to get local version details
            localVersionDetails = getCurrentLocalVersion();
            // 3. Get newest version details
            newVersionDetails = getNewestVersionDetails();
            // 4. Compare local to newest version
            if (localVersionDetails != null) {
                localVersionNumber = Long.parseLong(localVersionDetails[0].toString().replace(".", ""));
            } else {
                localVersionNumber = -1;
            }
            if (newVersionDetails != null) {
                newVersionNumber = Long.parseLong(newVersionDetails[0].replace(".", ""));
            } else {
                newVersionNumber = -1;
            }
            if (newVersionNumber > localVersionNumber) {
                // a. if new version available, go to prompt user to update
                messageDialog = "Click 'Yes' to update, 'No' to \n"
                        +"continue without updating. \n"
                        +"Local Version: " + localVersionNumber +"\n"
                        +"New Version: " + newVersionNumber;
                messageTitle = "Update Version?";
                userResponse = JOptionPane.showOptionDialog(prompt,
                                                            messageDialog,
                                                            messageTitle,
                                                            JOptionPane.YES_NO_OPTION,
                                                            JOptionPane.QUESTION_MESSAGE,
                                                            null, null, null);
            } else {
                // b. if local version is current, go to start up process
                didStart = openLocalVersionJar();
                if (didStart == false) {
                    // fatal fault. notify user and log the event
                    messageDialog = "The AllstyleProgramSuite failed to start.\n"
                            +"Conatct your system administrator for \n"
                            +"immediate assistance.";
                    messageTitle = "Startup Failed";
                    JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.ERROR_MESSAGE);
                    logger.logFatal(+ localVersionNumber + " is current. But failed to startup APS. ");
                }
            }
            if (userResponse == 0) {
                // 5. Provided case a. above, and user selects to update, begin update version process
                // 6. Attempt to rename target folder to _BAK
                didRenameFile = false;
                didRenameFile = renameLocalTarget("Folder", "_BAK");
                // to avoid null pointer exception on newVersionDetails[], very important to check if newVersionNumber > 0
                if (didRenameFile == true && newVersionNumber > 0) {
                    // a. if rename succedes, go to copy new version to target folder
                    File dir1 = new File("..");
                    try {
                        String path1 = dir1.getCanonicalPath();                    
                        File newVersionPath = new File(newVersionDetails[2]);
                        File destination = null;
                        String targetType = "";
                        if (newVersionDetails[3].equals("Null")) {
                            targetType = "Folder";
                            destination = new File(path1 + "\\" + TARGET_FOLDER);
                        } else {
                            targetType = "File";
                            destination = new File(path1 +"\\" + TARGET_FOLDER +"\\" + newVersionDetails[3]);
                        }
                        didUpdateVersion = copyNewVersionToTagetFolder(newVersionPath, destination, targetType);
                        
                    } catch (IOException ex) {
                        logger.logFatal("While attempting to copy new version " + newVersionNumber +" to target: " + ex);
                    }
                } else {
                    // b. if rename fails, notify user the update failed and attempt to open existing version
                    didStart = openLocalVersionJar();
                    if (didStart == false) {
                        // fatal fault. notify user and log the event
                        messageDialog = "The AllstyleProgramSuite failed to start.\n"
                            +"Conatct your system administrator for \n"
                            +"immediate assistance.";
                        messageTitle = "Startup Failed";
                        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.ERROR_MESSAGE);
                        logger.logFatal("User selected to update, but we failed to rename local folder_BAK. Attempted startup of APS and failed.");
                        return;
                    }
                }
                if (didUpdateVersion == true) {
                    // 7. Provided case a. above, and copy new version succedes, go to update local version history
                    boolean didUpdateVersionHistory = false;
                    Calendar cal = Calendar.getInstance();
                    int year = cal.get(Calendar.YEAR);
                    int month = cal.get(Calendar.MONTH) + 1;
                    int day = cal.get(Calendar.DAY_OF_MONTH);
                    String updated = ""; // need to read system date and convert to 2016-1-19 format to be used as last element in versionUpdateDetails
                    updated = month +"/" + day +"/" + year;
                    List<Object> versionUpdateDetails = Arrays.asList(new Object[] {newVersionDetails[0], newVersionDetails[1], newVersionDetails[2],
                    newVersionDetails[3], updated});
                    didUpdateVersionHistory = writeToLocalVersionHistory(versionUpdateDetails);
                    if (didUpdateVersionHistory == false) {
                        // just log the event and don't bother notifying user
                        logger.logDebug("Failed to update version history log: " +versionUpdateDetails.toString());
                    } 
                    didStart = openLocalVersionJar();
                    if (didStart == false) {
                        // fatal fault. notify user and log the event
                        messageDialog = "The AllstyleProgramSuite failed to start.\n"
                            +"Conatct your system administrator for \n"
                            +"immediate assistance.";
                        messageTitle = "Startup Failed";
                        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.ERROR_MESSAGE);
                        logger.logFatal("Version update completed without error but startup of APS failed.");
                        return;
                    }
                } else {
                    // since we failed to update to new version, need to rename the _BAK folder
                    didRenameFile = false;
                    didRenameFile = renameLocalTarget("Folder", "");
                    if (didRenameFile == true) {
                        logger.logDebug("Version update failed. Local target successfully renamed to original. Attaempting startup of APS");
                    } else {
                        logger.logDebug("Version update failed. Failed to rename local target. Attempting startup of APS.");
                    }
                    // and once the folder is set back to original name...
                    // need to notify the user and start up the local version
                    messageDialog = "The new version failed to install. Attempting \n"
                            +"to startup previous local version. If this \n"
                            +"problem persists, contact your system administrator.";
                        messageTitle = "Version Update Failed";
                        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.INFORMATION_MESSAGE);
                    didStart = openLocalVersionJar();
                    if (didStart == false) {
                        // fatal fault. notify user and log the event
                        messageDialog = "The AllstyleProgramSuite failed to start.\n"
                            +"Conatct your system administrator for \n"
                            +"immediate assistance.";
                        messageTitle = "Startup Failed";
                        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.ERROR_MESSAGE);
                        logger.logFatal("The version update failed for: " + newVersionDetails[0] + ", we attempted to rename local target and failed to startup APS");
                        return;
                    }
                }

            } else {
                // 8. Go to start up process
                didStart = openLocalVersionJar();
                if (didStart == false) {
                    // fatal fault. notify user and log the event
                    messageDialog = "The AllstyleProgramSuite failed to start.\n"
                            +"Conatct your system administrator for \n"
                            +"immediate assistance.";
                        messageTitle = "Startup Failed";
                        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.ERROR_MESSAGE);
                        // user selected to not install available version update
                        logger.logFatal("User opted not to install new version: " + newVersionDetails[0] +", and we failed to startup APS.");
                    return;
                }
            }
            
        }
        if (logger != null) logger = null;
        if (prompt != null) prompt = null;
            
    }

    private Object[] getCurrentLocalVersion() {
        Object[] listDetails = null;
        LogIt logger = new LogIt();
        // we need to read from the local .csv file located in the folder named 'src'
        try (
                ICsvListReader listReader = new CsvListReader(new FileReader("src\\VersionHistory.csv"), CsvPreference.STANDARD_PREFERENCE);
                ) {
            
            listReader.getHeader(true);
            final CellProcessor[] processors = getProcessors();
            List<Object> versionHistoryList;
            while ( (versionHistoryList = listReader.read(processors)) != null ) {
                listDetails = versionHistoryList.toArray();

            }
            return listDetails;
            
        } catch (FileNotFoundException ex) {
            logger.logFatal("Failed getCurrentLocalVersion() " + ex);
            
        } catch (IOException ex) {
            logger.logFatal("Failed getCurrentLocalVersion() " + ex);
        } finally {
            if (logger != null) logger = null;
        }

        return listDetails;
    }
    
    private static CellProcessor[] getProcessors() {
        
        final CellProcessor[] processors = new CellProcessor[] { 
                new NotNull(), // VersionNumber
                new NotNull(), // VersionDate
                new NotNull(), // Path
                new NotNull(), // FileName
                new NotNull(), // Updated

        };
        
        return processors;
    }
    
    private String[] getNewestVersionDetails() {
    // REQUIRES MS JDBC DRIVER VERSION 4.2   
        String versionNumber = "";
        Date versionDate = null;
        String versionPath = "";
        String versionFileName = "";
        LogIt logger = new LogIt();
        try (
                ResultSet versionHistoryCRS = versionHistoryCRS();
                ) 
        {
            
            if (!versionHistoryCRS.next()) {
                return null;
            } else {
                versionHistoryCRS.beforeFirst();
            }
            while (versionHistoryCRS.next()) {
                versionNumber = versionHistoryCRS.getString("VersionNumber");
                versionDate = versionHistoryCRS.getDate("VersionDate");
                versionPath = versionHistoryCRS.getString("Path");
                versionFileName = versionHistoryCRS.getString("FileName");
            }
            if (versionFileName == null) {
                versionFileName = "";
            }
            String[] newestVersionDetails = {versionNumber, versionDate.toString(), versionPath, versionFileName};
            
            return newestVersionDetails;
            
        } catch (SQLException ex) {
            logger.logFatal("Failed getNewestVersionDetails() " + ex);
        } finally {
            if (logger != null) logger = null;
            if (versionDate != null ) versionDate = null;
        }
        
        return null;
    }
    
    private boolean openLocalVersionJar() {
        boolean success = false;
        File dir1 = new File("..");
        LogIt logger = new LogIt();
        try {
            
            String path1 = dir1.getCanonicalPath();
            File targetJar = new File(path1 +"\\" + TARGET_FOLDER + "\\" + TARGET_JAR);
            if (targetJar.exists()) {
                String command = "java -jar \"" +targetJar.getPath();
                Runtime currentRunTime = Runtime.getRuntime();
                Process newProcess = currentRunTime.exec(command);
                System.exit(0);
                success = true;
                if (currentRunTime != null) currentRunTime = null;
            }
            if (targetJar != null) targetJar = null;
            return success;
        } catch (IOException ex) {
            logger.logFatal("Failed openLocalVersionJar() " +ex);
        } finally {
            if (logger != null) logger = null;
            if (dir1 != null) dir1 = null;
        }
            
        return false;
    }
    
    private boolean renameLocalTarget(String targetType, String suffix) {
        LogIt logger = new LogIt();
        boolean successBAK = false;
        File dir1 = new File("..");
        String backupName = "";
        File localVersionTarget = null;
        Path targetPath = null;
        try {
            String path1 = dir1.getCanonicalPath();
            switch (targetType) {
                case "Jar":
                    localVersionTarget = new File(path1 + "\\" + TARGET_FOLDER + "\\" + TARGET_JAR);
                    backupName = TARGET_JAR + suffix;
                    break;
                case "Folder":
                    localVersionTarget = new File(path1 + "\\" + TARGET_FOLDER);
                    backupName = TARGET_FOLDER + suffix;
                    break;
                default:
                    return false;
            }
            if (localVersionTarget.exists()) {
                targetPath = localVersionTarget.toPath();
                Files.move(targetPath, targetPath.resolveSibling(backupName), 
                        StandardCopyOption.REPLACE_EXISTING,
                        StandardCopyOption.ATOMIC_MOVE);
                successBAK = true;
            }
            
            return successBAK;
            
        } catch (IOException ex) {
            if (ex.getCause() instanceof FileSystemException) { // for some reason during test from IDE this failed to trigger
                logger.logFatal("Failed renameLocalTarget() " +ex);
            } else if (ex.getCause() instanceof AccessDeniedException) {
                logger.logTrace("Failed renameLocalTarget() " +  targetPath.toString() +": " +ex);
                return successBAK;
            } else {
                Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
                logger.logFatal("Failed renameLocalTarget() "  + ex);
            }

        } finally {
            if (dir1 != null ) dir1 = null;
            if (localVersionTarget != null) localVersionTarget = null;
            if (logger != null) logger = null;
            if (targetPath != null) targetPath = null;
        }
        return false;
    }
    
    private boolean copyNewVersionToTagetFolder(File newVersion, File destination, String targetType) {
        boolean success = false;
        LogIt logger = new LogIt();
        try {
            if (newVersion.exists()) {
                switch (targetType) {
                    case "File":
                        FileUtils.copyFile(newVersion, destination);
                        break;
                    case "Folder":
                        FileUtils.copyDirectory(newVersion, destination);
                        break;
                    default:
                        
                }
                success = true; 
            }
            return success;
        } catch (IOException ex) {
            logger.logFatal("Failed copyNewVersionToTagetFolder() " + ex);
        } finally {
            if (logger != null) logger = null;
        }
            
        return false;
    }

    private boolean writeToLocalVersionHistory(List<Object> versionUpdateDetails) {
        LogIt logger = new LogIt();
        try (
                ICsvListWriter listWriter = new CsvListWriter(new FileWriter("src\\VersionHistory.csv", true),
                    CsvPreference.STANDARD_PREFERENCE);
                ) { 
            
            final CellProcessor[] processors = getProcessors();
//            final String[] header = new String[]{"VersionNumber", "VersionDate", "Path", "FileName", "Updated"};
            listWriter.write(versionUpdateDetails, processors);

            return true;
            
        } catch (IOException ex) {
            logger.logFatal("Failed writeToLocalVersionHistory() " + ex);
        } finally {
            if (logger != null) logger = null;
        }
        return false;
    }
    
    private ResultSet versionHistoryCRS() {
        LogIt logger = new LogIt();
        try (
                CachedRowSet versionHistoryCRS = RowSetProvider.newFactory().createCachedRowSet();
                ) {
                
            String connectionURL = "jdbc:sqlserver://<INSERT_SQL_SERVER_HERE";
            String user = "<INSERT_USER_NAME>";
            String password = "INSERT_PASSWORD>";
            versionHistoryCRS.setUrl(connectionURL);
            versionHistoryCRS.setUsername(user);
            versionHistoryCRS.setPassword(password);
            String sqlStatement;
            sqlStatement = "SELECT Development.dbo.Versions_APS.VersionNumber, "
                    .concat("Development.dbo.Versions_APS.VersionDate, ")
                    .concat("Development.dbo.Versions_APS.Path, ")
                    .concat("Development.dbo.Versions_APS.FileName ")
                    .concat("FROM Development.dbo.Versions_APS ")
                    .concat("ORDER BY Development.dbo.Versions_APS.VersionDate ")
                    ;
            versionHistoryCRS.setCommand(sqlStatement);
            versionHistoryCRS.execute();
            
            return versionHistoryCRS;   
            
        } catch (SQLException ex) {
            logger.logFatal("Failed versionHistoryCRS()() " +ex);
        } finally {
            if (logger != null) logger = null;
        }
        
        return null;
    }
    
// OLD METHODS USED FOR DEVELPMENT AND TESTING
    private void processVersionUpdate() {
        String[] versionDetails = getNewestVersionDetails();
        String versionNumber = versionDetails[0];
        String versionDate = versionDetails[1];
        String versionPath = versionDetails[2];
        String versionFileName = versionDetails[3];
        
        try {
            
            File dir1 = new File("..");
            String path1 = dir1.getCanonicalPath();
            MessagePrompt prompt;
            prompt = new MessagePrompt();
            String messageDialog = "";
            String messageTitle = "";
            String localVersionFiles = "";
            localVersionFiles = path1 + "\\" + TARGET_FOLDER;
            messageDialog = "Current Directory: \n"
                        + path1 +"\n"
                    +"New Version Number: \n"
                    +versionNumber +"\n"
                    +"New Version Date: \n"
                    +versionDate +"\n";
           
            File checkLocalVersionFiles = new File(localVersionFiles);
            if (!checkLocalVersionFiles.exists()) {
                // this is a fatal error. Notify user and quit
//                return;
            } else {
                messageDialog = messageDialog 
                        +"Target To Delete: \n"
                        +localVersionFiles + "\n";
            }
            String pathVersionHistory = path1 + "\\APS Startup\\src\\VersionHistory.csv";
            // check to make sure we have a version history file to work with
            File versionHistory = new File(pathVersionHistory);
            if (!versionHistory.exists()) {
                // this is a fatal error. Notify user and quit
//                return;
            } else {
                messageDialog = messageDialog
                        +"Version History File: \n"
                        +pathVersionHistory +"\n";
            }
            // check to make sure we have the new updated files
            File updatedFiles = new File(versionPath);
            if (!updatedFiles.exists()) {
                // this is a fatal error. Notify user and quit
//                return;
            } else {
                messageDialog = messageDialog
                        +"New Update Files: \n"
                        +versionPath +"\n";
            }
            if (!versionFileName.equals("")) {
                // we have a file name so perform steps required to move the file
                messageDialog = messageDialog
                        +"A Single File will be updated: \n"
                        +versionFileName;
            } else {
                // we have no file name so perform steps required to move the directory
                messageDialog = messageDialog
                        +"An Entire Directory will be updated: \n"
                        +TARGET_FOLDER;
            }
            
            messageTitle = "Current Paths";
            JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.INFORMATION_MESSAGE);
            
        } catch (IOException ex) {
            Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void copyPasteFiles() {
        try {
// http://www.javacodegeeks.com/2014/10/apache-commons-io-tutorial.html
// http://stackoverflow.com/questions/5368724/how-to-copy-a-folder-and-all-its-subfolders-and-files-into-another-folder
            
            File sourceFile = new File("C:\\Users\\petehahn\\Documents\\Test Copy\\LogFile.csv");
            File destinationFile = new File("C:\\Users\\petehahn\\Documents\\Test Paste\\LogFile.csv");
            if (sourceFile.exists()) {
                if (destinationFile.exists()) {
                    FileUtils.deleteQuietly(destinationFile);
                }
                FileUtils.copyFile(sourceFile, destinationFile);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void copyPasteDirectories() {
        try {
            File sourceDirectory = new File("C:\\Users\\petehahn\\Documents\\Test Copy");
            File destinationDirectory = new File("C:\\Users\\petehahn\\Documents\\Test Paste\\Test Copy");
            if (sourceDirectory.exists()) {
                if (destinationDirectory.exists()) {
                    FileUtils.deleteDirectory(destinationDirectory);
                }
                FileUtils.copyDirectory(sourceDirectory, destinationDirectory);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void printVersionDetailsToConsole() {
        String[] versionDetails = getNewestVersionDetails();
        for (String detail : versionDetails) {
            System.out.println(detail);
        }
    }
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowOpened

    private void jButtonPrintVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintVersionActionPerformed
        // TODO add your handling code here:
        getCurrentLocalVersion();
    }//GEN-LAST:event_jButtonPrintVersionActionPerformed

    private void jButtonRenameFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameFolderActionPerformed
        // TODO add your handling code here:
        MessagePrompt prompt;
        prompt = new MessagePrompt();
        String messageDialog = "";
        String messageTitle = "";
        boolean success = false;

        success = renameLocalTarget("Folder", "_BAK");
        if (success == true) {
            messageTitle = "Success";
            messageDialog = "The folder was renamed without error";
        } else {
            messageTitle = "Failure";
            messageDialog = "The folder could not be renamed";
        }
        messageTitle = "Current Paths";
        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonRenameFolderActionPerformed

    private void jButtonRenameFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenameFileActionPerformed
        // TODO add your handling code here:
        MessagePrompt prompt;
        prompt = new MessagePrompt();
        String messageDialog = "";
        String messageTitle = "";
        boolean success = false;

        success = renameLocalTarget("Jar", "_BAK");
        if (success == true) {
            messageTitle = "Success";
            messageDialog = "The file was renamed without error";
        } else {
            messageTitle = "Failure";
            messageDialog = "The file could not be renamed";
        }
        JOptionPane.showMessageDialog(prompt, messageDialog, messageTitle, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonRenameFileActionPerformed

    private void jButtonCheckFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckFilesActionPerformed
        // TODO add your handling code here:
        //        processVersionUpdate();
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);

        int month = cal.get(Calendar.MONTH) + 1;

        int day = cal.get(Calendar.DAY_OF_MONTH);
        System.out.println(year + "-" + month +"-" + day);

    }//GEN-LAST:event_jButtonCheckFilesActionPerformed

    private void jButtonDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetailsActionPerformed
        // TODO add your handling code here:
        printVersionDetailsToConsole();
    }//GEN-LAST:event_jButtonDetailsActionPerformed

    private void jButtonMoveDirectoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveDirectoriesActionPerformed
        // TODO add your handling code here:
        copyPasteDirectories();
    }//GEN-LAST:event_jButtonMoveDirectoriesActionPerformed

    private void jButtonMoveFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveFilesActionPerformed
        // TODO add your handling code here:
        copyPasteFiles();

    }//GEN-LAST:event_jButtonMoveFilesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckFiles;
    private javax.swing.JButton jButtonDetails;
    private javax.swing.JButton jButtonMoveDirectories;
    private javax.swing.JButton jButtonMoveFiles;
    private javax.swing.JButton jButtonPrintVersion;
    private javax.swing.JButton jButtonRenameFile;
    private javax.swing.JButton jButtonRenameFolder;
    // End of variables declaration//GEN-END:variables
}
